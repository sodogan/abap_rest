class ZCL_CRM_REST_HANDLER definition
  public
  final
  create public .

public section.

  types:
    BEGIN OF ty_customer_post_response,
        customer TYPE string,
      END OF ty_customer_post_response .

  constants MC_CALLER_ID type STRING value 'callerId' ##NO_TEXT.
  constants MC_USER_ID type STRING value 'userId' ##NO_TEXT.
  constants MC_NAME type STRING value 'name' ##NO_TEXT.
  constants MC_COMPANY_ID type STRING value 'companyId' ##NO_TEXT.
  constants MC_PERSON_ID type STRING value 'personId' ##NO_TEXT.
  constants MC_OFFSET type STRING value 'offset' ##NO_TEXT.
  constants MC_LIMIT type STRING value 'limit' ##NO_TEXT.
  constants MC_STATUS type STRING value 'status' ##NO_TEXT.
  constants MC_CUSTOMER_CRM_ID type STRING value 'customerCRMId' ##NO_TEXT.
  constants MC_CUSTOMER_SAP_ID type STRING value 'customerSAPId' ##NO_TEXT.

  methods CONSTRUCTOR
    raising
      ZCX_CRM_REST_HANDLER .
  methods GET_CRM_ACTIVITY
    importing
      !IS_ACTIVITY_GET_REQ type ZSMG_CRM_ACTIVITY_GET_REQ
    returning
      value(RS_ACTIVITY) type ZSMG_CRM_ACTIVITY
    raising
      ZCX_CRM_REST_HANDLER .
  methods GET_LIST_CRM_ACTIVITY
    importing
      !IS_ACTIVITY_GET_LIST_REQ type ZSMG_CRM_ACTIVITY_GET_LIST_REQ
    returning
      value(RT_ACTIVITIES) type ZTTMG_CRM_ACTIVITY
    raising
      ZCX_CRM_REST_HANDLER .
  methods SAVE_CRM_ACTIVITY
    importing
      !IS_ACTIVITY_SAVE_REQ type ZSMG_CRM_ACTIVITY_SAVE_REQ
    returning
      value(RV_RESPONSE) type STRING
    raising
      ZCX_CRM_REST_HANDLER .
  methods GET_CRM_CUSTOMER
    importing
      !IS_CUSTOMER_GET_REQ type ZSMG_CRM_CUSTOMER_GET_REQ
    returning
      value(RS_CUSTOMER) type ZSMG_CRM_CUSTOMER
    raising
      ZCX_CRM_REST_HANDLER .
  methods SAVE_CRM_CUSTOMER
    importing
      !IS_CUSTOMER_SAVE_REQ type ZSMG_CRM_CUSTOMER_SAVE_REQ
    returning
      value(RV_CUSTOMER) type STRING
    raising
      ZCX_CRM_REST_HANDLER .
  methods GET_LIST_CRM_CUSTOMER
    importing
      !IS_CUSTOMER_GET_LIST_REQ type ZSMG_CRM_CUSTOMER_GET_LIST_REQ
    returning
      value(RT_CUSTOMERS) type ZTTMG_CRM_CUSTOMER
    raising
      ZCX_CRM_REST_HANDLER .
  class-methods GET_MAPPING_ACTIVITY
    returning
      value(RT_MAPPING) type /UI2/CL_JSON=>NAME_MAPPINGS .
  class-methods GET_MAPPING_CUSTOMER
    returning
      value(RT_MAPPING) type /UI2/CL_JSON=>NAME_MAPPINGS .
protected section.
private section.

  data MR_HTTP_CLIENT type ref to IF_HTTP_CLIENT .
  data MR_REST_CLIENT type ref to CL_REST_HTTP_CLIENT .

  methods CREATE_HTTP_CLIENT
    raising
      ZCX_CRM_REST_HANDLER .
  methods GET_BAPIRET2
    returning
      value(RS_RETURN) type BAPIRET2 .
  methods RAISE_EXCEPTION
    importing
      !I_STRING type STRING optional
    raising
      ZCX_SIMPLE .
  methods RAISE_EXC_FROM_STATUS_CODE
    importing
      !IV_STATUS_CODE type STRING
    raising
      ZCX_CRM_REST_HANDLER .
ENDCLASS.



CLASS ZCL_CRM_REST_HANDLER IMPLEMENTATION.


  METHOD constructor.
    DATA: ls_return   TYPE bapiret2,
          lv_errortxt TYPE string.

*Create http Client object
    TRY.
        me->create_http_client( ).
      CATCH zcx_crm_rest_handler INTO DATA(lr_crm_rest_handler_exception).
        RAISE EXCEPTION NEW zcx_crm_rest_handler( previous = lr_crm_rest_handler_exception ).
    ENDTRY.

*Create REST Client object
    TRY.
        CREATE OBJECT me->mr_rest_client
          EXPORTING
            io_http_client = me->mr_http_client.

      CATCH cx_rest_client_exception INTO DATA(lr_rest_exception).
        RAISE EXCEPTION NEW zcx_crm_rest_handler( previous = lr_rest_exception ).
    ENDTRY.

  ENDMETHOD.


METHOD create_http_client.
***********************************************************************
* Class           : ZCL_CRM_REST_HANDLER                              *
* Package         : ZML_SHARED                                        *
*                                                                     *
* Author          : Michal Brulinski, Tieto                           *
*                                                                     *
* Description     : Initialize instance of HTTP Client                *
*                   and set its header fields                         *
*                   Uses REST client to retrieve the data.            *
*                                                                     *
* Change history:                                                     *
* Date       // Author                    // Description              *
* ------------------------------------------------------------------- *
* 28.04.2022 // Michal Brulinski, Tieto   // First version created    *
*                                                                     *
***********************************************************************
  CONSTANTS c_auth TYPE string VALUE 'Authorization' ##NO_TEXT.
  CONSTANTS c_content_type TYPE string VALUE 'content-type'.
  CONSTANTS c_accept TYPE string VALUE 'ACCEPT' ##NO_TEXT.
  CONSTANTS c_application_json TYPE string VALUE 'application/json'.
  CONSTANTS c_rfc_dest TYPE rfcdest VALUE 'TBD'. " TODO: RFC Destination still to be receieved; see MFORT-18178 https://jira.shared.tds.metsagroup.com/browse/MFORT-18178
  CONSTANTS: gc_e TYPE dd26e-enqmode VALUE 'E'.

  DATA: lv_reason        TYPE string,
        lv_utc_timestamp TYPE timestampl,
        ls_return        TYPE bapiret2.

  DATA: lv_auth_val TYPE string.

* TODO: Determine if we will create the client instance by destination or URL
*Create the HTTP client instance
  CALL METHOD cl_http_client=>create_by_destination
    EXPORTING
      destination              = c_rfc_dest
    IMPORTING
      client                   = me->mr_http_client
    EXCEPTIONS
      destination_not_found    = 1
      internal_error           = 2
      argument_not_found       = 3
      destination_no_authority = 4
      plugin_not_active        = 5
      OTHERS                   = 5.
  IF sy-subrc NE 0.
*      GET TIME STAMP FIELD lv_utc_timestamp. "if app log handle needed
*      es_return = me->get_bapiret2( ).
    RAISE EXCEPTION NEW zcx_crm_rest_handler( textid = zcx_crm_rest_handler=>http_client_creation_failed ).
  ENDIF.

*Set HTTP header fields
  me->mr_http_client->request->set_header_field(
    EXPORTING
      name  = c_accept
      value = c_application_json ).
  me->mr_http_client->request->set_header_field(
    EXPORTING
      name  = c_content_type
      value = c_application_json ).

*  Set version
  me->mr_http_client->request->set_version(
    if_http_request=>co_protocol_version_1_1 ).

ENDMETHOD.


  method GET_BAPIRET2.
*Wrapper for syst messages
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = syst-msgty
          cl     = syst-msgid
          number = syst-msgno
          par1   = syst-msgv1
          par2   = syst-msgv2
          par3   = syst-msgv3
          par4   = syst-msgv4
        IMPORTING
          return = rs_return.
  endmethod.


  METHOD get_crm_activity.
***********************************************************************
* Class           : ZCL_CRM_REST_HANDLER                              *
* Package         : ZML_SHARED                                        *
*                                                                     *
* Author          : Michal Brulinski, Tieto                           *
*                                                                     *
* Description     : Implementation of GET method for CRM Activity     *
*                   Build REST call to outside API                    *
*                   Uses REST client to retrieve the data.            *
*                                                                     *
* Change history:                                                     *
* Date       // Author                    // Description              *
* ------------------------------------------------------------------- *
* 05.05.2022 // Michal Brulinski, Tieto   // First version created    *
*                                                                     *
***********************************************************************
    DATA: lr_json   TYPE REF TO /ui2/cl_json,
          lr_entity TYPE REF TO if_rest_entity.

    DATA: lv_return       TYPE bapiret2,
          ls_crm_activity TYPE zsmg_crm_activity,
          lv_errortxt     TYPE string.

    DATA: lv_uri TYPE string.

    " Build url based on request parameters
    CHECK me->mr_http_client IS BOUND.
    CHECK me->mr_rest_client IS BOUND.
* Build URI

* Convert data from ABAP dictionary stucture to JSON to pass as request payload
    /ui2/cl_json=>serialize(
      EXPORTING
        data             =  is_activity_get_req                " Data to serialize
        pretty_name      = /ui2/cl_json=>pretty_mode-camel_case                 " Pretty Print property names
        name_mappings    = zcl_crm_rest_handler=>get_mapping_activity( )                 " ABAP<->JSON Name Mapping Table
      RECEIVING
        r_json           = DATA(lv_payload_json)                 " JSON string
    ).

* Create rest entity
    lr_entity = mr_rest_client->if_rest_client~create_request_entity( ).
    lr_entity->set_content_type( iv_media_type = if_rest_media_type=>gc_appl_json ).
    lr_entity->set_string_data( lv_payload_json ).


* Call Request
    cl_http_utility=>set_request_uri(
      EXPORTING
        request = me->mr_http_client->request
        uri     = lv_uri ).

    TRY.
        me->mr_rest_client->if_rest_client~post( lr_entity ).
        DATA(lo_response) = me->mr_rest_client->if_rest_client~get_response_entity( ).
        DATA(lv_http_status) = lo_response->get_header_field( '~status_code' ).

        "request failed -> STOP Processing
        IF lv_http_status NE 200.
          me->raise_exc_from_status_code( lv_http_status ).
        ENDIF.

        "Receive the response data in JSON.
        DATA(lv_string_data) = lo_response->get_string_data( ).
        IF me->mr_http_client IS BOUND.
          me->mr_http_client->refresh_response( ).
          me->mr_http_client->close( ).
        ENDIF.

        "exception handling
      CATCH cx_rest_client_exception INTO DATA(lo_rest_client_excp).
        RAISE EXCEPTION NEW zcx_crm_rest_handler( previous = lo_rest_client_excp ).
    ENDTRY.

    " Parse the response into structure
    IF lv_string_data IS NOT INITIAL.
      /ui2/cl_json=>deserialize(
        EXPORTING
          json             = lv_string_data                 " JSON string
          pretty_name      = /ui2/cl_json=>pretty_mode-camel_case                 " Pretty Print property names
          name_mappings    = zcl_crm_rest_handler=>get_mapping_activity( )                 " ABAP<->JSON Name Mapping Table
        CHANGING
          data             = rs_activity       " Data to serialize
      ).
    ENDIF.
  ENDMETHOD.


  method GET_CRM_CUSTOMER.
***********************************************************************
* Class           : ZCL_CRM_REST_HANDLER                              *
* Package         : ZML_SHARED                                        *
*                                                                     *
* Author          : Michal Brulinski, Tieto                           *
*                                                                     *
* Description     : Implementation of GET method for CRM Customer     *
*                   Build REST call to outside API                    *
*                   Uses REST client to retrieve the data.            *
*                                                                     *
* Change history:                                                     *
* Date       // Author                    // Description              *
* ------------------------------------------------------------------- *
* 28.04.2022 // Michal Brulinski, Tieto   // First version created    *
*                                                                     *
***********************************************************************
    DATA: lr_json TYPE REF TO /ui2/cl_json,
          lr_entity TYPE REF TO if_rest_entity.

    DATA: lv_return   TYPE bapiret2,
          ls_crm_customer TYPE zsmg_crm_customer,
          lv_errortxt TYPE string.

    DATA: lv_uri TYPE string.

    " Build url based on request parameters
    "lv_uri = |callerId={ is_customer_get_req-caller_id },customerCRMId={ is_customer_get_req-crm_id },customerSAPId={ is_customer_get_req-sap_id }|.
    CHECK me->mr_http_client IS BOUND.
    CHECK me->mr_rest_client IS BOUND.
    "todo: check user role
* Build URI

* Convert data from ABAP dictionary stucture to JSON to pass as request payload

    " TODO: Test pretty printer, most probably custom name mapping table would be created
    " For example: CUSTOMER_CRM_ID would be => customerCrmId, but we want customerCRMId
    /ui2/cl_json=>serialize(
      EXPORTING
        data             =  is_customer_get_req                " Data to serialize
        pretty_name      = /ui2/cl_json=>pretty_mode-camel_case                 " Pretty Print property names
        name_mappings    = me->get_mapping_customer( )                  " ABAP<->JSON Name Mapping Table
*        conversion_exits =                  " Use DDIC conversion exits on serialize of values
      RECEIVING
        r_json           = DATA(lv_payload_json)                 " JSON string
    ).

* Create rest entity
    lr_entity = mr_rest_client->if_rest_client~create_request_entity( ).
    lr_entity->set_content_type( iv_media_type = if_rest_media_type=>gc_appl_json ).
    lr_entity->set_string_data( lv_payload_json ).

* Call Request
    cl_http_utility=>set_request_uri(
      EXPORTING
        request = me->mr_http_client->request
        uri     = lv_uri ).

    TRY.
        me->mr_rest_client->if_rest_client~post( lr_entity ).
        DATA(lo_response) = me->mr_rest_client->if_rest_client~get_response_entity( ).
        DATA(lv_http_status) = lo_response->get_header_field( '~status_code' ).

        "request failed -> STOP Processing
        IF lv_http_status NE 200.
*          DATA(lv_reason) = lo_response->get_header_field( '~status_reason' ).
*          lv_errortxt = lv_reason.
          me->raise_exc_from_status_code( lv_http_status ).
        ENDIF.

        "Receive the response data in JSON.
        DATA(lv_string_data) = lo_response->get_string_data( ).
        IF me->mr_http_client IS BOUND.
          me->mr_http_client->refresh_response( ).
          me->mr_http_client->close( ).
        ENDIF.

        "Exception handling
      CATCH cx_rest_client_exception INTO DATA(lo_rest_client_excp).
        "lv_errortxt = lo_rest_client_excp->get_longtext( ).
        RAISE EXCEPTION NEW zcx_crm_rest_handler( previous = lo_rest_client_excp ).
    ENDTRY.

    " Parse the response into structure
    IF lv_string_data IS NOT INITIAL.
      /ui2/cl_json=>deserialize(
        EXPORTING
          json             = lv_string_data                 " JSON string
          pretty_name      = /ui2/cl_json=>pretty_mode-camel_case                 " Pretty Print property names
          name_mappings    = me->get_mapping_customer( )                  " ABAP<->JSON Name Mapping Table
        CHANGING
          data             = rs_customer       " Data to serialize
      ).
    ENDIF.

  endmethod.


  method GET_LIST_CRM_ACTIVITY.
***********************************************************************
* Class           : ZCL_CRM_REST_HANDLER                              *
* Package         : ZML_SHARED                                        *
*                                                                     *
* Author          : Michal Brulinski, Tieto                           *
*                                                                     *
* Description     : Implementation of GET method for CRM Activity     *
*                   Build REST call to outside API                    *
*                   Uses REST client to retrieve the data.            *
*                                                                     *
* Change history:                                                     *
* Date       // Author                    // Description              *
* ------------------------------------------------------------------- *
* 24.05.2022 // Michal Brulinski, Tieto   // First version created    *
*                                                                     *
***********************************************************************
    DATA: lr_json TYPE REF TO /ui2/cl_json,
          lr_entity TYPE REF TO if_rest_entity.

    DATA: lv_return   TYPE bapiret2,
          ls_crm_activity TYPE zsmg_crm_activity,
          lv_errortxt TYPE string.

    DATA: lv_uri TYPE string.

    " Build url based on request parameters
    CHECK me->mr_http_client IS BOUND.
    CHECK me->mr_rest_client IS BOUND.
* Build URI

* Convert data from ABAP dictionary stucture to JSON to pass as request payload
    /ui2/cl_json=>serialize(
      EXPORTING
        data             =  is_activity_get_list_req                " Data to serialize
        pretty_name      = /ui2/cl_json=>pretty_mode-camel_case                 " Pretty Print property names
        name_mappings    = zcl_crm_rest_handler=>get_mapping_activity( )                 " ABAP<->JSON Name Mapping Table
      RECEIVING
        r_json           = DATA(lv_payload_json)                 " JSON string
    ).

* Create rest entity
    lr_entity = mr_rest_client->if_rest_client~create_request_entity( ).
    lr_entity->set_content_type( iv_media_type = if_rest_media_type=>gc_appl_json ).
    lr_entity->set_string_data( lv_payload_json ).


* Call Request
    cl_http_utility=>set_request_uri(
      EXPORTING
        request = me->mr_http_client->request
        uri     = lv_uri ).

    TRY.
        me->mr_rest_client->if_rest_client~post( lr_entity ).
        DATA(lo_response) = me->mr_rest_client->if_rest_client~get_response_entity( ).
        DATA(lv_http_status) = lo_response->get_header_field( '~status_code' ).

        "request failed -> STOP Processing
        IF lv_http_status NE 200.
          me->raise_exc_from_status_code( lv_http_status ).
        ENDIF.

        "Receive the response data in JSON.
        DATA(lv_string_data) = lo_response->get_string_data( ).
        IF me->mr_http_client IS BOUND.
          me->mr_http_client->refresh_response( ).
          me->mr_http_client->close( ).
        ENDIF.

        "exception handling
      CATCH cx_rest_client_exception INTO DATA(lo_rest_client_excp).
        RAISE EXCEPTION NEW zcx_crm_rest_handler( previous = lo_rest_client_excp ).
    ENDTRY.

    " Parse the response into structure
    IF lv_string_data IS NOT INITIAL.
      /ui2/cl_json=>deserialize(
        EXPORTING
          json             = lv_string_data                 " JSON string
          pretty_name      = /ui2/cl_json=>pretty_mode-camel_case                 " Pretty Print property names
          name_mappings    = zcl_crm_rest_handler=>get_mapping_activity( )                 " ABAP<->JSON Name Mapping Table
        CHANGING
          data             = rt_activities       " Data to serialize
      ).
    ENDIF.
  endmethod.


  method GET_LIST_CRM_CUSTOMER.
***********************************************************************
* Class           : ZCL_CRM_REST_HANDLER                              *
* Package         : ZML_SHARED                                        *
*                                                                     *
* Author          : Michal Brulinski, Tieto                           *
*                                                                     *
* Description     : Implementation of GET LIST method for CRM Customer*
*                   Build REST call to outside API                    *
*                   Uses REST client to retrieve the data.            *
*                                                                     *
* Change history:                                                     *
* Date       // Author                    // Description              *
* ------------------------------------------------------------------- *
* 28.04.2022 // Michal Brulinski, Tieto   // First version created    *
*                                                                     *
***********************************************************************
    DATA: lr_json TYPE REF TO /ui2/cl_json,
          lr_entity TYPE REF TO if_rest_entity.

    DATA: lv_return   TYPE bapiret2,
          ls_crm_customer TYPE zsmg_crm_customer,
          lt_crm_customers TYPE zttmg_crm_customer,
          lv_errortxt TYPE string.

    DATA: lv_uri TYPE string.

    " Build url based on request parameters
    "lv_uri = |callerId={ is_customer_get_list_req-caller_id },customerCRMId={ is_customer_get_req-crm_id },customerSAPId={ is_customer_get_req-sap_id }|.
    CHECK me->mr_http_client IS BOUND.
    CHECK me->mr_rest_client IS BOUND.
    "todo: check user role
*Build Request URI

* Convert data from ABAP dictionary stucture to JSON to pass as request payload
    /ui2/cl_json=>serialize(
      EXPORTING
        data             =  is_customer_get_list_req                " Data to serialize
        pretty_name      = /ui2/cl_json=>pretty_mode-camel_case                 " Pretty Print property names
        name_mappings    = me->get_mapping_customer( )                  " ABAP<->JSON Name Mapping Table
      RECEIVING
        r_json           = DATA(lv_payload_json)                 " JSON string
    ).

* Create rest entity
    lr_entity = mr_rest_client->if_rest_client~create_request_entity( ).
    lr_entity->set_content_type( iv_media_type = if_rest_media_type=>gc_appl_json ).
    lr_entity->set_string_data( lv_payload_json ).

*Call Request
    cl_http_utility=>set_request_uri(
      EXPORTING
        request = me->mr_http_client->request
        uri     = lv_uri ).

    TRY.
        me->mr_rest_client->if_rest_client~post( lr_entity ).
        DATA(lo_response) = me->mr_rest_client->if_rest_client~get_response_entity( ).
        DATA(lv_http_status) = lo_response->get_header_field( '~status_code' ).

        "request failed -> STOP Processing
        IF lv_http_status NE 200.
          me->raise_exc_from_status_code( lv_http_status ).
        ENDIF.

        "Receive the response data in JSON.
        DATA(lv_string_data) = lo_response->get_string_data( ).
        IF me->mr_http_client IS BOUND.
          me->mr_http_client->refresh_response( ).
          me->mr_http_client->close( ).
        ENDIF.

        "exception handling
      CATCH cx_rest_client_exception INTO DATA(lo_rest_client_excp).
        RAISE EXCEPTION NEW zcx_crm_rest_handler( previous = lo_rest_client_excp ).
    ENDTRY.

    " Parse the response into structure
    IF lv_string_data IS NOT INITIAL.
      /ui2/cl_json=>deserialize(
        EXPORTING
          json             = lv_string_data                 " JSON string
          pretty_name      = /ui2/cl_json=>pretty_mode-camel_case                 " Pretty Print property names
          name_mappings    = me->get_mapping_customer( )                  " ABAP<->JSON Name Mapping Table
        CHANGING
          data             = rt_customers       " Data to serialize
      ).
    ENDIF.
  endmethod.


  METHOD GET_MAPPING_ACTIVITY.

    rt_mapping = VALUE #(
                          " Activity Get Req
                          " Activity
                          ( abap = 'CUSTOMER_CRMID' json = 'customerCRMId' )
                          ( abap = 'WOOD_PURCHASE_OFFER_SAPNUMBER' json = 'woodPurchaseOfferSAPNumber' )
                          ( abap = 'WOOD_PURCHASE_CONTRACT_SAPNUMB' json = 'woodPurchaseContractSAPNumber' )
                          ( abap = 'WOOD_PURCHASE_CONTRACT_SAPDECA' json = 'woodPurchaseContractSAPDecade' )
                          ( abap = 'SILVI_CULTURE_OFFER_SAPNUMBER' json = 'silvicultureOfferSAPNumber' )
                          ( abap = 'SILVI_CULTURE_CONTRACT_SAPNUMB' json = 'silvicultureContractSAPNumber' )
                          ( abap = 'MV_WOOD_PURCHASE_INQUIRY_SAPNU' json = 'mvWoodPurchaseInquirySAPNumber' )
                          ( abap = 'MV_WOOD_PURCHASE_OFFER_SAPNUMB' json = 'mvWoodPurchaseOfferSAPNumber' )
                          ( abap = 'MV_SILVICULTURE_INQUIRY_SAPNUM' json = 'mvSilvicultureInquirySAPNumber' )
                          ( abap = 'MV_SILVICULTURE_OFFER_SAPNUMBE' json = 'mvSilvicultureOfferSAPNumber' )
                          ( abap = 'SEASON_PLAN_SAPNUMBER' json = 'seasonPlanSAPNumber' )
                          ( abap = 'EXTERNAL_INQUIRY_SAPNUMBER' json = 'externalInquirySAPNumber' )
                          ( abap = 'EXTERNAL_OFFER_SAPNUMBER' json = 'externalOfferSAPNumber' )
                          ( abap = 'REFERENCE_LINK_URL' json = 'referenceLinkURL' )
                          ( abap = 'EXTERNAL_CR_KUTTIO_NUMBER' json = 'externalCRKuutioNumber' )
                          ( abap = 'CRMCUSTOMER_FULL_NAME' json = 'CRMCustomerFullName' )
                          ( abap = 'SAP_DRAFT_ID' json = 'SAPDraftId' )
                          ( abap = 'TEHTAVAN_TILA' json = 'TehtavanTila' ) ).

  ENDMETHOD.


  METHOD get_mapping_customer.

    rt_mapping = VALUE #( ( abap = 'CUSTOMER_CRMID' json = 'customerCRMId' )
                          ( abap = 'CUSTOMER_SAPID' json = 'customerSAPId' )
                          ( abap = 'SOCIAL_SECURITY_NUMBER' json = 'socialSecurityNumber' )
                          ( abap = 'BUSINESS_ID' json = 'businessId' )
                          ( abap = 'FIRST_NAME' json = 'firstName' )
                          ( abap = 'LAST_NAME' json = 'lastName' )
                          ( abap = 'FULL_NAME' json = 'fullName' )
                          ( abap = 'ADDRESS' json = 'address' )
                          ( abap = 'POSTAL_CODE' json = 'postalCode' )
                          ( abap = 'CITY' json = 'city' )
                          ( abap = 'PHONE' json = 'phone' )
                          ( abap = 'EMAIL' json = 'email' )
                          ( abap = 'CUSTOMER_GROUP_RESULT' json = 'customerGroupResult' )
                          ( abap = 'STATUS' json = 'status' )
                          ( abap = 'LANGUAGE' json = 'language' )
                          ( abap = 'PHONE2' json = 'phone2' )
                          ( abap = 'ESTATE_NUMBER' json = 'estateNumber' )
                          ( abap = 'TOTAL_AREA' json = 'totalArea' )
                          ( abap = 'FOREST_OWNER_GROUP' json = 'forestOwnerGroup' )
                          ( abap = 'DO_NOT_SEND_MM' json = 'doNotSendMM' )
                          ( abap = 'EMAIL_PERMISSION' json = 'emailPermission' )
                          ( abap = 'TXT_PERMISSION' json = 'txtPermission' )
                          ( abap = 'DISTRICT_CODE' json = 'districtCode' )
                          ( abap = 'ESTATES' json = 'estates' )
                          ( abap = 'KTJ_ID' json = 'ktjId' )
                          ( abap = 'KIID' json = 'KIId' )
                          ( abap = 'MUNICIPALITY_CODE' json = 'municipalityCode' )
                          ( abap = 'VILLAGE_NAME' json = 'villageName' )
                          ( abap = 'ESTATE_NAME' json = 'estateName' )
                          ( abap = 'UNSEPARATED_PARCEL_TYPE_CHAR' json = 'unseparetedParcelTypeChar' )
                          ( abap = 'UNSEPARATED_PARCEL_TYPE_NUMBER' json = 'unseparetedParcelTypeNumber' ) ).

  ENDMETHOD.


  METHOD RAISE_EXCEPTION.
    RAISE EXCEPTION TYPE zcx_simple
      EXPORTING
        text     = i_string.

  ENDMETHOD.


  METHOD raise_exc_from_status_code.

    CASE iv_status_code.
      WHEN '400'.
        RAISE EXCEPTION NEW zcx_crm_rest_handler( textid = zcx_crm_rest_handler=>bad_request ).
      WHEN '401'.
        RAISE EXCEPTION NEW zcx_crm_rest_handler( textid = zcx_crm_rest_handler=>unauthorized ).
      WHEN '404'.
        RAISE EXCEPTION NEW zcx_crm_rest_handler( textid = zcx_crm_rest_handler=>not_found ).
      WHEN '500'.
        RAISE EXCEPTION NEW zcx_crm_rest_handler( textid = zcx_crm_rest_handler=>internal_server_error ).
    ENDCASE.
  ENDMETHOD.


  method SAVE_CRM_ACTIVITY.
***********************************************************************
* Class           : ZCL_CRM_REST_HANDLER                              *
* Package         : ZML_SHARED                                        *
*                                                                     *
* Author          : Michal Brulinski, Tieto                           *
*                                                                     *
* Description     : Implementation of POST (SAVE) method for          *
*                   CRM Activity                                      *
*                   Build REST call to outside API                    *
*                   Uses REST client to retrieve the data.            *
*                                                                     *
* Change history:                                                     *
* Date       // Author                    // Description              *
* ------------------------------------------------------------------- *
* 24.05.2022 // Michal Brulinski, Tieto   // First version created    *
*                                                                     *
***********************************************************************
    DATA: lr_json   TYPE REF TO /ui2/cl_json,
          lr_entity TYPE REF TO if_rest_entity.

    DATA: lv_return       TYPE bapiret2,
          ls_crm_activity TYPE zsmg_crm_activity,
          lv_errortxt     TYPE string,
          lv_uri          TYPE string.

          "ls_response_data     TYPE ty_activity_post_response.

    " Build url based on request parameters
    CHECK me->mr_http_client IS BOUND.
    CHECK me->mr_rest_client IS BOUND.


* Build URI

*    me->mr_http_client->append_field_url(
*      EXPORTING
*        name  = mc_caller_id                 " Field Name
*        value = is_customer_get_req-caller_id                 " Field Value
*      CHANGING
*        url   = lv_uri                 " URL to which to append the field
*    ).

* Convert data from ABAP dictionary stucture to JSON to pass as request payload
    /ui2/cl_json=>serialize(
      EXPORTING
        data             =  is_activity_save_req                " Data to serialize
        pretty_name      = /ui2/cl_json=>pretty_mode-camel_case                 " Pretty Print property names
        name_mappings    = zcl_crm_rest_handler=>get_mapping_activity( )                 " ABAP<->JSON Name Mapping Table
      RECEIVING
        r_json           = DATA(lv_payload_json)                 " JSON string
    ).

* Create rest entity
    lr_entity = mr_rest_client->if_rest_client~create_request_entity( ).
    lr_entity->set_content_type( iv_media_type = if_rest_media_type=>gc_appl_json ).
    lr_entity->set_string_data( lv_payload_json ).

* Call Request
    TRY.
        " POST request
        me->mr_rest_client->if_rest_client~post( lr_entity ).
        " Collect response
        DATA(lo_response) = me->mr_rest_client->if_rest_client~get_response_entity( ).
        DATA(lv_http_status) = lo_response->get_header_field( '~status_code' ).

        "request failed -> STOP Processing
        IF lv_http_status NE 200.
          me->raise_exc_from_status_code( lv_http_status ).
        ENDIF.
        "Receive the response data
        DATA(lv_string_data) = lo_response->get_string_data( ).
        rv_response = lv_string_data.

        "exception handling
      CATCH cx_rest_client_exception INTO DATA(lo_rest_client_excp).
        RAISE EXCEPTION NEW zcx_crm_rest_handler( previous = lo_rest_client_excp ).
    ENDTRY.
  endmethod.


  METHOD save_crm_customer.
***********************************************************************
* Class           : ZCL_CRM_REST_HANDLER                              *
* Package         : ZML_SHARED                                        *
*                                                                     *
* Author          : Michal Brulinski, Tieto                           *
*                                                                     *
* Description     : Implementation of POST (SAVE) method for          *
*                   CRM Customer                                      *
*                   Build REST call to outside API                    *
*                   Uses REST client to retrieve the data.            *
*                                                                     *
* Change history:                                                     *
* Date       // Author                    // Description              *
* ------------------------------------------------------------------- *
* 28.04.2022 // Michal Brulinski, Tieto   // First version created    *
*                                                                     *
***********************************************************************
    DATA: lr_json   TYPE REF TO /ui2/cl_json,
          lr_entity TYPE REF TO if_rest_entity.

    DATA: lv_return       TYPE bapiret2,
          ls_crm_customer TYPE zsmg_crm_customer,
          lv_errortxt     TYPE string,
          lv_uri          TYPE string,

          ls_response_data     TYPE ty_customer_post_response.

    " Build url based on request parameters
    "lv_uri = |callerId={ is_customer_get_req-caller_id },customerCRMId={ is_customer_get_req-crm_id },customerSAPId={ is_customer_get_req-sap_id }|.
    CHECK me->mr_http_client IS BOUND.
    CHECK me->mr_rest_client IS BOUND.


* Build URI

*    me->mr_http_client->append_field_url(
*      EXPORTING
*        name  = mc_caller_id                 " Field Name
*        value = is_customer_get_req-caller_id                 " Field Value
*      CHANGING
*        url   = lv_uri                 " URL to which to append the field
*    ).

* Convert data from ABAP dictionary stucture to JSON to pass as request payload
    /ui2/cl_json=>serialize(
      EXPORTING
        data             =  is_customer_save_req                " Data to serialize
        pretty_name      = /ui2/cl_json=>pretty_mode-camel_case                 " Pretty Print property names
        name_mappings    = me->get_mapping_customer( )                  " ABAP<->JSON Name Mapping Table
      RECEIVING
        r_json           = DATA(lv_payload_json)                 " JSON string
    ).

* Create rest entity
    lr_entity = mr_rest_client->if_rest_client~create_request_entity( ).
    lr_entity->set_content_type( iv_media_type = if_rest_media_type=>gc_appl_json ).
    lr_entity->set_string_data( lv_payload_json ).

* Call Request
    TRY.
        " POST request
        me->mr_rest_client->if_rest_client~post( lr_entity ).
        " Collect response
        DATA(lo_response) = me->mr_rest_client->if_rest_client~get_response_entity( ).
        DATA(lv_http_status) = lo_response->get_header_field( '~status_code' ).

        "request failed -> STOP Processing
        IF lv_http_status NE 200.
          me->raise_exc_from_status_code( lv_http_status ).
        ENDIF.
        "Receive the response data in JSON.
        DATA(lv_string_data) = lo_response->get_string_data( ).
        " Parse the response into structure
        IF lv_string_data IS NOT INITIAL.
          /ui2/cl_json=>deserialize(
            EXPORTING
              json             = lv_string_data    " JSON string
              pretty_name      = /ui2/cl_json=>pretty_mode-camel_case                 " Pretty Print property names
              name_mappings    = me->get_mapping_customer( )                  " ABAP<->JSON Name Mapping Table
            CHANGING
              data             = ls_response_data       " Data to serialize
          ).
          rv_customer = ls_response_data-customer.
        ENDIF.

        "exception handling
      CATCH cx_rest_client_exception INTO DATA(lo_rest_client_excp).
        RAISE EXCEPTION NEW zcx_crm_rest_handler( previous = lo_rest_client_excp ).
    ENDTRY.

  ENDMETHOD.
ENDCLASS.